{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM2GscCoG1icD74ZhYUGDix"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["##Theoretical"],"metadata":{"id":"xrHPYy7JzTwJ"}},{"cell_type":"markdown","source":["1. **What does R-squared represent in a regression model ?**"],"metadata":{"id":"NYoJF_1S1ao_"}},{"cell_type":"markdown","source":["ANSWER : R-squared (R²), also known as the coefficient of determination, is a statistical measure that represents the proportion of the variance in the dependent variable that is explained by the independent variable(s) in a regression model.\n","\n","In simpler terms:\n","\n","R-squared tells you how well your regression model fits the data. It indicates the percentage of variation in the dependent variable that can be predicted by the independent variable(s).\n","\n","Interpretation:\n","\n","R² = 1: Indicates a perfect fit, meaning the model explains all the variability in the dependent variable.\n","R² = 0: Indicates that the model does not explain any of the variability in the dependent variable.\n","0 < R² < 1: Indicates the proportion of the variance in the dependent variable that is explained by the model. For example, an R² of 0.80 means that 80% of the variation in the dependent variable is explained by the independent variable(s) in the model.\n","Example:\n","\n","Imagine you are building a model to predict house prices based on their size (square footage). If your model has an R-squared of 0.75, it means that 75% of the variation in house prices can be explained by the size of the house. The remaining 25% of the variation is due to other factors not included in the model, such as location, number of bedrooms, etc.\n","\n","Important Considerations:\n","\n","R-squared alone does not indicate whether a model is good or bad. A high R-squared does not necessarily mean the model is a good fit, and a low R-squared does not necessarily mean the model is a bad fit.\n","R-squared can be artificially inflated by adding more independent variables to the model, even if those variables are not truly relevant.\n","It is essential to consider other factors, such as the model's assumptions and the significance of the independent variables, when evaluating the quality of a regression model."],"metadata":{"id":"cO1E_KCj1tWy"}},{"cell_type":"markdown","source":["2. **What are the assumptions of linear regression ?**"],"metadata":{"id":"ExM2u61xBPZK"}},{"cell_type":"markdown","source":["ANSWER : The key assumptions of linear regression:\n","\n","Linearity: The relationship between the independent and dependent variables should be linear. This means that the change in the dependent variable is proportional to the change in the independent variable. You can check this assumption by examining a scatterplot of the data. If the relationship appears to be non-linear, you may need to transform the data or consider using a different type of regression model.\n","\n","Independence: The observations should be independent of each other. This means that the value of one observation should not be influenced by the value of any other observation. This assumption is often violated in time series data, where observations are typically correlated over time. If the independence assumption is violated, you may need to use a different type of regression model, such as a time series model.\n","\n","Homoscedasticity: The variance of the errors should be constant across all levels of the independent variable. This means that the spread of the residuals should be roughly the same for all values of the independent variable. You can check this assumption by examining a scatterplot of the residuals versus the predicted values. If the spread of the residuals appears to be different for different values of the independent variable, you may need to transform the data or consider using a different type of regression model.\n","\n","Normality: The errors should be normally distributed. This means that the distribution of the residuals should be approximately bell-shaped. You can check this assumption by examining a histogram or a normal probability plot of the residuals. If the residuals are not normally distributed, you may need to transform the data or consider using a different type of regression model.\n","\n","No or little multicollinearity: The independent variables should not be highly correlated with each other. If the independent variables are highly correlated, it can be difficult to determine the individual effect of each variable on the dependent variable. You can check for multicollinearity by calculating the correlation matrix between the independent variables. If there are high correlations between the independent variables, you may need to remove one or more of the variables from the model.\n","\n","These assumptions are crucial for ensuring the validity and reliability of the results obtained from linear regression analysis. If any of these assumptions are violated, the results of the analysis may be misleading or inaccurate. Therefore, it is essential to check these assumptions before interpreting the results of a linear regression model."],"metadata":{"id":"V1ACHK-PB3Zc"}},{"cell_type":"markdown","source":["3. **What is the difference between R-squared and Adjusted R-squared ?**\n"],"metadata":{"id":"52sXvUHrCFUt"}},{"cell_type":"markdown","source":["ANSWER : the difference between R-squared and Adjusted R-squared:\n","\n","R-squared:\n","\n","Represents the proportion of variance in the dependent variable explained by the independent variables.\n","Always increases or remains the same when new predictors are added to the model, even if they don't significantly improve the model.\n","Can be misleading when evaluating models with many predictors, as it might suggest a better fit than actually exists.\n","Adjusted R-squared:\n","\n","Modifies R-squared to account for the number of predictors in the model.\n","Increases only if the new predictor enhances the model more than would be expected by chance.\n","Decreases when a predictor improves the model by less than expected.\n","Provides a more realistic assessment of model fit, especially when comparing models with different numbers of predictors.\n","Is always lower than the R-squared.\n","In essence:\n","\n","R-squared tells you how well your model fits the data, but it can be artificially inflated by adding more predictors.\n","Adjusted R-squared provides a more realistic measure of model fit by penalizing the addition of unnecessary predictors.\n","When to use which:\n","\n","R-squared is useful for understanding the overall goodness of fit of a model.\n","Adjusted R-squared is more appropriate for comparing models with different numbers of predictors and for model selection."],"metadata":{"id":"k67xpNjaCLwU"}},{"cell_type":"markdown","source":["4.  **Why do we use Mean Squared Error (MSE) ?**"],"metadata":{"id":"CZ3idGk8Gdza"}},{"cell_type":"markdown","source":["ANSWER : Mean Squared Error (MSE) is a common metric used to evaluate the performance of regression models. It measures the average squared difference between the predicted and actual values. Here's a breakdown of the reasons for its widespread use:\n","\n","Sensitivity to Errors: By squaring the errors, MSE gives more weight to larger errors. This makes it sensitive to outliers and helps to identify models that make significant prediction mistakes.\n","\n","Differentiability: MSE is a differentiable function, which means it can be easily used in optimization algorithms for finding the best model parameters. Gradient descent, a popular optimization technique, relies on the derivative of the loss function, and MSE's differentiability makes it suitable for this purpose.\n","\n","Mathematical Convenience: MSE has desirable mathematical properties that simplify calculations and analysis. Its formula is straightforward to understand and implement, making it computationally efficient.\n","\n","Relationship to Variance: MSE is closely related to the variance of the errors, a fundamental statistical concept. Minimizing MSE often leads to reducing the variance, which indicates a better model fit.\n","\n","Widely Accepted: MSE is a well-established and widely accepted metric in the field of machine learning. Its common usage allows for easy comparison of model performance across different studies and datasets.\n","\n","In summary, MSE is used because it effectively captures the magnitude of errors, is mathematically convenient, and aligns with statistical principles. These properties make it a valuable tool for evaluating and improving regression models."],"metadata":{"id":"YeZ4sgKiGoCv"}},{"cell_type":"markdown","source":["5. **What does an Adjusted R-squared value of 0.85 indicate ?**"],"metadata":{"id":"7K2jCiGjGuij"}},{"cell_type":"markdown","source":["ANSWER : an Adjusted R-squared value of 0.85 indicates:\n","\n","An Adjusted R-squared value of 0.85 indicates that 85% of the variation in the dependent variable is explained by the independent variables in the model, after adjusting for the number of predictors.\n","\n","Interpretation:\n","\n","This is generally considered a good Adjusted R-squared value, suggesting that the model has a strong ability to predict the dependent variable.\n","It means that the independent variables included in the model are doing a good job of explaining the variability observed in the dependent variable.\n","The \"adjusted\" aspect is important: it means this value considers the complexity of the model (number of independent variables used). So, it's not artificially inflated by simply adding more predictors.\n","In practical terms:\n","\n","If you were using this model for prediction, you could expect it to provide relatively accurate predictions for the dependent variable, given the values of the independent variables.\n","\n","Important Caveats:\n","\n","While 0.85 is good, the ideal Adjusted R-squared value can vary depending on the specific context and dataset.\n","A high Adjusted R-squared doesn't guarantee that the model is the best possible model, or that it perfectly captures the underlying relationship between variables.\n","Other factors, such as model assumptions and potential biases, should also be considered when evaluating the overall quality and usefulness of the model.\n"],"metadata":{"id":"gnhP33iNG11c"}},{"cell_type":"markdown","source":["6.  **How do we check for normality of residuals in linear regression ?**"],"metadata":{"id":"l-kZEwRwHAS-"}},{"cell_type":"markdown","source":["ANSWER :  check for the normality of residuals in linear regression:\n","\n","1. Visual Inspection:\n","\n","Histogram: Plot a histogram of the residuals. If the residuals are normally distributed, the histogram should resemble a bell-shaped curve.\n","Q-Q Plot (Quantile-Quantile Plot): Create a Q-Q plot of the residuals. In a Q-Q plot, the observed quantiles of the residuals are plotted against the expected quantiles of a normal distribution. If the residuals are normally distributed, the points on the Q-Q plot should fall approximately along a straight diagonal line.\n","2. Statistical Tests:\n","\n","Shapiro-Wilk Test: This is a widely used statistical test for normality. The null hypothesis of the Shapiro-Wilk test is that the data is normally distributed. If the p-value of the test is less than the significance level (typically 0.05), then the null hypothesis is rejected, and it is concluded that the data is not normally distributed.\n","Kolmogorov-Smirnov Test: This is another statistical test for normality. Like the Shapiro-Wilk test, the null hypothesis is that the data is normally distributed. If the p-value is less than the significance level, then the null hypothesis is rejected.\n","Anderson-Darling Test: This test is also used for normality. It is often considered more powerful than the Kolmogorov-Smirnov test.\n","Here's an example of how to check for normality of residuals using Python in a Colab notebook:\n","\n","\n","import statsmodels.api as sm\n","import matplotlib.pyplot as plt\n","import scipy.stats as stats\n","\n","#### Assuming you have your model fitted as 'model' and residuals as 'residuals'\n","\n","#### Histogram\n","plt.hist(residuals)\n","plt.title('Histogram of Residuals')\n","plt.show()\n","\n","#### Q-Q Plot\n","sm.qqplot(residuals, line='s')\n","plt.title('Q-Q Plot of Residuals')\n","plt.show()\n","\n","#### Shapiro-Wilk Test\n","shapiro_test = stats.shapiro(residuals)\n","print(f\"Shapiro-Wilk Test: Statistic={shapiro_test[0]}, p-value={shapiro_test[1]}\")\n","Use code with caution\n","Interpretation:\n","\n","If the visual inspections (histogram and Q-Q plot) show a roughly bell-shaped distribution and a straight diagonal line, respectively, and the statistical tests have p-values greater than 0.05, then it can be concluded that the residuals are approximately normally distributed.\n","If the visual inspections show deviations from normality and the statistical tests have p-values less than 0.05, then the normality assumption may be violated. In this case, you might consider transforming the data or using a different type of regression model."],"metadata":{"id":"L3JpbJ_zHIVq"}},{"cell_type":"markdown","source":["7.  **What is multicollinearity, and how does it impact regression ?**"],"metadata":{"id":"id4nqF6tHcrs"}},{"cell_type":"markdown","source":["ANSWER : Multicollinearity is a phenomenon in regression analysis where two or more independent variables in a regression model are highly correlated with each other. In simpler terms, it means that some of your predictor variables are providing redundant information.\n","\n","How Does Multicollinearity Impact Regression?\n","\n","While multicollinearity doesn't completely invalidate your regression model, it can lead to several issues:\n","\n","Unstable and unreliable coefficient estimates: The estimated coefficients (the weights assigned to each independent variable) become very sensitive to small changes in the data. This makes it difficult to determine the true relationship between each predictor and the outcome variable.\n","\n","Inflated standard errors: The standard errors of the coefficients increase, making it harder to determine if the predictors are statistically significant. You might see large p-values for predictors that are actually important.\n","\n","Difficulty in interpreting individual predictor effects: When predictors are highly correlated, it's hard to isolate the unique contribution of each predictor to the dependent variable.\n","\n","Reduced model predictability: Although the overall model might still have a good R-squared, the individual predictors become less reliable for making predictions.\n"," multicollinearity makes your regression model less stable, less interpretable, and less reliable for inference, even if the overall model fit appears good."],"metadata":{"id":"E8jbWUxCHjGk"}},{"cell_type":"markdown","source":["8. **What is Mean Absolute Error (MAE) ?**\n"],"metadata":{"id":"Bb6y9I1lHu6m"}},{"cell_type":"markdown","source":["ANSWER : Mean Absolute Error (MAE) is a metric used to measure the average absolute difference between the predicted and actual values in a regression model.\n","\n","Formula:\n","\n","\n","MAE = (1/n) * Σ|yi - ŷi|\n","Use code with caution\n","Where:\n","\n","n is the number of data points\n","yi is the actual value for the ith data point\n","ŷi is the predicted value for the ith data point\n","Σ denotes the sum over all data points\n","In simpler terms:\n","\n","MAE calculates the average of the absolute errors, which are the differences between the predicted and actual values. By taking the absolute value, we ignore the direction of the errors (whether the prediction is too high or too low) and focus only on the magnitude of the errors.\n","\n","Why use MAE?\n","\n","Easy to understand: MAE is straightforward to interpret. It represents the average absolute difference between predictions and actual values.\n","Robust to outliers: Unlike Mean Squared Error (MSE), MAE is less sensitive to outliers because it doesn't square the errors.\n","Scale-dependent: MAE is in the same unit as the target variable, making it easy to relate the error to the original data.\n","Example:\n","\n","If a model predicts house prices with an MAE of $5,000, it means that, on average, the predictions are off by $$5,000, it means that, on average, the predictions are off by $5,000 from the actual prices.\n","\n","When to use MAE:\n","\n","When you want a metric that is easy to understand and interpret.\n","When you want a metric that is robust to outliers.\n","When the scale of the target variable is important."],"metadata":{"id":"pd1dEcLnH4nh"}},{"cell_type":"markdown","source":["9. **What are the benefits of using an ML pipeline ?**"],"metadata":{"id":"1f3jCqQkIBR1"}},{"cell_type":"markdown","source":["ANSWER : An ML pipeline is a sequence of steps that are executed in order to train and deploy a machine learning model. These steps can include data collection, data cleaning, feature engineering, model training, model evaluation, and model deployment.\n","\n","Here are the key benefits of using an ML pipeline:\n","\n","Reproducibility: ML pipelines make it easier to reproduce experiments and results. By defining the sequence of steps and their parameters in a pipeline, you can recreate the entire process exactly, ensuring consistent results.\n","\n","Automation: Pipelines automate many routine tasks in the ML workflow, such as data preprocessing, feature engineering, and model training. This frees up data scientists to focus on more complex tasks, such as model selection and hyperparameter tuning.\n","\n","Modularity: Pipelines enable you to break down the machine learning process into modular, well-defined steps. Each step can be developed, tested, and optimized independently, making it easier to manage and maintain the workflow.\n","\n","Scalability: Pipelines can be easily scaled to handle large datasets or complex workflows. This is essential for building and deploying machine learning models in production environments.\n","\n","Collaboration: Pipelines promote collaboration among data scientists and engineers. By providing a shared framework for developing and deploying ML models, pipelines make it easier for teams to work together effectively.\n","\n","Efficiency: Automating tasks and streamlining the workflow leads to increased efficiency in the development and deployment of ML models. This can significantly reduce the time and cost required to bring ML solutions to market.\n","\n","Experimentation: Pipelines make it easier to experiment with different data preprocessing techniques, feature selections, and models by modifying individual steps in the pipeline. This helps in finding the best-performing model for a given task.\n","\n","Monitoring and Maintenance: Pipelines can be integrated with monitoring and logging tools to track the performance of ML models in production and to identify potential issues. This makes it easier to maintain and update ML models over time.\n","\n",", using an ML pipeline provides numerous benefits, including reproducibility, automation, modularity, scalability, collaboration, efficiency, experimentation, and monitoring and maintenance. These benefits are essential for building robust, reliable, and scalable ML solutions."],"metadata":{"id":"0T-ZoHdaIIpY"}},{"cell_type":"markdown","source":["10. **Why is RMSE considered more interpretable than MSE ?**"],"metadata":{"id":"usvlGhq6IU30"}},{"cell_type":"markdown","source":["ANSWER : Root Mean Squared Error (RMSE) is often considered more interpretable than Mean Squared Error (MSE):\n","\n","RMSE is more interpretable than MSE because it's in the same units as the target variable. This makes it easier to understand the magnitude of the error in the context of the problem you're trying to solve.\n","\n","Here's a breakdown:\n","\n","MSE: Calculates the average of the squared differences between predicted and actual values. Squaring the errors magnifies larger errors and gives them more weight, but it also changes the units of the error to squared units. This can make it difficult to interpret the error in a meaningful way.\n","\n","RMSE: Takes the square root of MSE, bringing the error back to the original units of the target variable. This makes the error directly comparable to the values you're trying to predict.\n","\n","Example:\n","\n","If you're predicting house prices in dollars, MSE would be in squared dollars (which isn't a meaningful unit). RMSE, on the other hand, would be in dollars, allowing you to easily understand how much, on average, your predictions deviate from the actual prices.\n","\n","\n","RMSE is preferred for interpretability because:\n","\n","It's in the original units of the target variable.\n","It's easier to understand the magnitude of the error in the context of the problem.\n","While both MSE and RMSE are valuable metrics for evaluating regression models, RMSE is often favored when interpretability is a primary concern."],"metadata":{"id":"XePMQBwHIa3e"}},{"cell_type":"markdown","source":["11. **What is pickling in Python, and how is it useful in ML ?**"],"metadata":{"id":"wZ6EAEyJIf4Q"}},{"cell_type":"markdown","source":["ANSWER : In Python, \"pickling\" is the process of converting a Python object hierarchy into a byte stream. This byte stream can then be stored in a file or transferred over a network. The reverse process, turning a byte stream back into a Python object hierarchy, is called \"unpickling.\"\n","\n","Essentially, pickling allows you to save the state of a Python object so that you can load it later and continue working with it without having to recreate the object from scratch.\n","\n","How is Pickling Useful in Machine Learning?\n","\n","Pickling is particularly useful in machine learning for the following reasons:\n","\n","Saving Trained Models: After spending time and resources training a machine learning model, you'll want to save it for future use. Pickling allows you to save the entire model object, including its architecture, weights, and any other relevant information, to a file. This way, you can easily load the pre-trained model later without retraining it.\n","\n","Saving Data Preprocessing Steps: Machine learning workflows often involve complex data preprocessing steps. Pickling allows you to save the preprocessing objects (e.g., scalers, encoders) so you can apply the same preprocessing to new data without having to re-execute the preprocessing code.\n","\n","Sharing Models and Data: Pickled objects can be easily shared with others, allowing them to load and use your models or data in their own projects.\n","\n","Caching Intermediate Results: In some cases, you might want to save intermediate results of your machine learning pipeline (e.g., feature vectors) to avoid recomputing them. Pickling can be used for this purpose as well.\n","\n","Example:\n","\n","\n","import pickle\n","\n","#### Save a trained model to a file\n","with open('trained_model.pkl', 'wb') as file:\n","    pickle.dump(model, file)\n","\n","#### Load the trained model from the file\n","with open('trained_model.pkl', 'rb') as file:\n","    loaded_model = pickle.load(file)\n","Use code with caution\n","Important Considerations:\n","\n","Pickling is specific to Python. Pickled objects cannot be easily loaded in other programming languages.\n","There are security risks associated with unpickling data from untrusted sources, as it could potentially execute malicious code. Only unpickle data that you trust.\n","In summary, pickling is a valuable tool in machine learning for saving and loading objects, making it easier to reuse models, share work, and streamline workflows."],"metadata":{"id":"ZeWUeXrbIp1u"}},{"cell_type":"markdown","source":["12. **What does a high R-squared value mean ?**"],"metadata":{"id":"5g9QKt0GI83c"}},{"cell_type":"markdown","source":["ANSWER : In the context of regression analysis, a high R-squared value generally indicates that the model fits the data well and that the independent variables are doing a good job of explaining the variation in the dependent variable.\n","\n","Here's a more detailed breakdown:\n","\n","R-squared (R²), also known as the coefficient of determination, represents the proportion of the variance in the dependent variable that is explained by the independent variables in the model.\n","\n","A high R-squared value, typically closer to 1, suggests that a large percentage of the variability in the dependent variable is accounted for by the independent variables included in the model. For example, an R-squared of 0.90 would indicate that 90% of the variation in the dependent variable is explained by the independent variables.\n","\n","This implies a strong relationship between the independent and dependent variables, meaning that the model is able to effectively capture and predict the behavior of the dependent variable based on the values of the independent variables.\n","\n","However, it's important to note that a high R-squared value does not necessarily guarantee a good model. Here are some caveats to consider:\n","\n","Overfitting: A model with a very high R-squared might be overfitting the training data, meaning it's capturing noise and random fluctuations in the data rather than the true underlying relationship. This can lead to poor performance on unseen data.\n","Irrelevant Variables: A high R-squared can also be achieved by including irrelevant independent variables in the model. This can artificially inflate the R-squared value without actually improving the model's predictive power.\n","Context Dependence: The interpretation of R-squared can depend on the specific context and dataset. What constitutes a \"high\" R-squared value can vary depending on the field of study and the complexity of the problem.\n","Therefore, while a high R-squared value is generally desirable, it's crucial to consider other factors, such as model complexity, overfitting, and the relevance of the independent variables, before drawing conclusions about the model's quality and usefulness."],"metadata":{"id":"YfLR50FqJDbr"}},{"cell_type":"markdown","source":["13 . **What happens if linear regression assumptions are violated ?**"],"metadata":{"id":"xW9vj-r8Jtwh"}},{"cell_type":"markdown","source":["ANSWER : the assumptions of linear regression are violated:\n","\n","Violating the assumptions of linear regression can have several consequences, impacting the validity and reliability of the model's results. Here's a breakdown of the potential issues:\n","\n","1. Linearity: If the relationship between the independent and dependent variables is not linear, the linear regression model will not accurately capture the underlying pattern. This can lead to biased estimates of the coefficients and inaccurate predictions.\n","\n","2. Independence: If the observations are not independent, the standard errors of the coefficients will be underestimated, leading to inflated t-statistics and potentially incorrect conclusions about the significance of the predictors.\n","\n","3. Homoscedasticity: If the variance of the errors is not constant across all levels of the independent variable (heteroscedasticity), the standard errors of the coefficients will be biased, affecting the validity of hypothesis tests and confidence intervals.\n","\n","4. Normality: If the errors are not normally distributed, the validity of hypothesis tests and confidence intervals may be compromised, especially for small sample sizes.\n","\n","5. Multicollinearity: If there is high multicollinearity among the independent variables, the coefficient estimates will become unstable and difficult to interpret, making it challenging to identify the individual effects of the predictors.\n","\n","Overall Consequences:\n","\n","Biased coefficient estimates: The estimated coefficients may not accurately reflect the true relationships between the variables.\n","Inaccurate predictions: The model may make poor predictions on new data.\n","Misleading inferences: Hypothesis tests and confidence intervals may lead to incorrect conclusions about the significance and importance of the predictors.\n","Reduced model reliability: The overall reliability and trustworthiness of the model will be diminished.\n","Remedies:\n","\n","When assumptions are violated, several remedies can be considered:\n","\n","Data transformations: Applying transformations to the variables (e.g., logarithmic, square root) can help address non-linearity or heteroscedasticity.\n","Different regression models: Consider using alternative regression models, such as robust regression or non-linear regression, that are more appropriate for the data.\n","Addressing multicollinearity: Remove or combine highly correlated predictors to reduce multicollinearity.\n","Bootstrapping: Use bootstrapping techniques to obtain more robust estimates of standard errors and confidence intervals.\n","It's important to carefully assess the assumptions of linear regression and take appropriate steps to address any violations to ensure the validity and reliability of the model's results."],"metadata":{"id":"rdbQHeikKDgs"}},{"cell_type":"markdown","source":["14. **How can we address multicollinearity in regression ?**"],"metadata":{"id":"iFFVwj8hKSfd"}},{"cell_type":"markdown","source":["ANSWER : Okay, let's discuss how to address multicollinearity in regression:\n","\n","Multicollinearity, as you know, can significantly impact the reliability and interpretability of your regression model. Here are some common approaches to address this issue:\n","\n","1. Remove Highly Correlated Predictors:\n","\n","Identify correlated predictors: Calculate the correlation matrix between your independent variables. Look for pairs of predictors with high correlation coefficients (typically above 0.7 or 0.8).\n","Remove one of the correlated predictors: If two predictors are highly correlated, consider removing one of them from the model. Choose the predictor that is less theoretically important or has a weaker relationship with the dependent variable.\n","Reasoning: By removing one of the correlated predictors, you reduce the redundancy in the model and improve the stability of the coefficient estimates.\n","\n","2. Combine Correlated Predictors:\n","\n","Create a composite variable: If two or more predictors are highly correlated and theoretically related, you can combine them into a single composite variable. This can be done by averaging the variables, creating an index, or using principal component analysis (PCA).\n","Reasoning: Combining correlated predictors into a single variable reduces the dimensionality of the model and avoids the issue of redundant information.\n","\n","3. Collect More Data:\n","\n","Increase sample size: Sometimes, multicollinearity can be due to a small sample size. By collecting more data, you increase the variability in the independent variables, which can help reduce the correlation between them.\n","Reasoning: A larger sample size provides more information for the model to estimate the coefficients accurately, reducing the impact of multicollinearity.\n","\n","4. Regularization Techniques:\n","\n","Ridge regression or Lasso regression: These techniques introduce a penalty term to the regression equation that shrinks the coefficients towards zero. This can help reduce the impact of multicollinearity by reducing the variance of the coefficient estimates.\n","Reasoning: Regularization techniques help prevent overfitting and stabilize the model, making it less sensitive to multicollinearity.\n","\n","5. Feature Selection:\n","\n","Select relevant features: Use feature selection techniques to identify the most important predictors for the model. This can help reduce the number of variables in the model and potentially eliminate some of the correlated predictors.\n","Reasoning: By selecting only the most relevant features, you can simplify the model and reduce the risk of multicollinearity.\n","\n","Choosing the Right Approach:\n","\n","The best approach to address multicollinearity depends on the specific dataset and the goals of the analysis. Consider the following factors:\n","\n","Severity of multicollinearity: If the correlation between predictors is very high, removing or combining predictors might be necessary.\n","Theoretical importance of predictors: If a predictor is theoretically important, even if it is correlated with other predictors, you might want to keep it in the model.\n","Sample size: If the sample size is small, collecting more data might be the best option.\n","Complexity of the model: If the model is complex, regularization techniques might be helpful.\n","By carefully considering these factors and applying appropriate techniques, you can effectively address multicollinearity and improve the reliability and interpretability of your regression model."],"metadata":{"id":"y2FMm_bvKYuf"}},{"cell_type":"markdown","source":["15.  **How can feature selection improve model performance in regression analysis ?**"],"metadata":{"id":"pjrTIdoFKkn5"}},{"cell_type":"markdown","source":["ANSWER : Feature selection is the process of selecting a subset of relevant features (independent variables) to use in building a machine learning model. In regression analysis, it can significantly improve model performance in several ways:\n","\n","Reduces Overfitting: By using only the most relevant features, feature selection helps prevent overfitting, which occurs when the model learns the training data too well and performs poorly on unseen data. A simpler model with fewer features is less likely to capture noise and random fluctuations in the training data.\n","\n","Improves Accuracy: By removing irrelevant or redundant features, feature selection can improve the accuracy of the model's predictions. Irrelevant features can introduce noise and distract the model from learning the true relationships between the variables.\n","\n","Reduces Training Time: With fewer features, the model requires less time and computational resources to train. This can be especially important when dealing with large datasets or complex models.\n","\n","Enhances Interpretability: A simpler model with fewer features is easier to understand and interpret. This can be valuable for gaining insights into the relationships between the variables and for explaining the model's predictions to stakeholders.\n","\n","Reduces Collinearity: Feature selection techniques can help mitigate the issue of multicollinearity (high correlation between features) by identifying and removing redundant predictors. This can improve the stability and reliability of the model's coefficient estimates.\n","\n","Here's how feature selection works in practice:\n","\n","Start with a set of potential features: These could be all the variables available in your dataset or a subset based on domain knowledge.\n","\n","Apply a feature selection technique: There are various techniques to choose from, such as:\n","\n","Filter methods: These methods rank features based on statistical measures (e.g., correlation, chi-squared test) and select the top-ranked features.\n","Wrapper methods: These methods use a machine learning model to evaluate the performance of different feature subsets and select the subset that yields the best results.\n","Embedded methods: These methods incorporate feature selection as part of the model training process, such as using regularization techniques like Lasso or Ridge regression.\n","Evaluate the performance of the selected features: Use cross-validation or a holdout set to assess the model's performance with the selected features and compare it to the performance with all features.\n","\n","Iterate and refine: If necessary, adjust the feature selection technique or parameters and repeat the evaluation process to further optimize the feature subset.\n","\n","By carefully selecting the most relevant features, you can build more robust, accurate, and interpretable regression models that generalize well to new data."],"metadata":{"id":"b6xTtZ_oKsS8"}},{"cell_type":"markdown","source":["16. **How is Adjusted R-squared calculated ?**"],"metadata":{"id":"kiG4DluBK57e"}},{"cell_type":"markdown","source":["ANSWER : Adjusted R-squared is a modified version of R-squared that has been adjusted for the number of predictors in the model. It is calculated as follows:\n","\n","\n","Adjusted R-squared = 1 - [(1 - R-squared) * (n - 1) / (n - k - 1)]\n","Use code with caution\n","Where:\n","\n","R-squared is the coefficient of determination.\n","n is the number of observations in the dataset.\n","k is the number of predictor variables in the model.\n","Breaking it down:\n","\n","(1 - R-squared): Represents the proportion of the variance in the dependent variable that is not explained by the model.\n","\n","(n - 1) / (n - k - 1): This part is the adjustment factor. It penalizes the addition of unnecessary predictors to the model.\n","\n","As the number of predictors (k) increases, this factor becomes larger, leading to a decrease in Adjusted R-squared.\n","As the sample size (n) increases, the impact of the adjustment factor decreases.\n","1 - [(1 - R-squared) * (n - 1) / (n - k - 1)]: Subtracting the penalized unexplained variance from 1 gives us the Adjusted R-squared.\n","\n","Why use Adjusted R-squared?\n","\n","Avoids overestimating model fit: R-squared always increases or stays the same when you add more predictors, even if they don't truly improve the model. Adjusted R-squared, on the other hand, only increases if the new predictor improves the model more than would be expected by chance. This helps avoid selecting overly complex models that overfit the data.\n","\n","Better for model comparison: When comparing models with different numbers of predictors, Adjusted R-squared provides a more realistic measure of model fit.\n","\n","\n","Adjusted R-squared is a valuable metric for evaluating and comparing regression models, particularly when dealing with multiple predictors. It helps to avoid overfitting and provides a more realistic assessment of model performance."],"metadata":{"id":"jWpAytMwTbiq"}},{"cell_type":"markdown","source":["17. **Why is MSE sensitive to outliers ?**"],"metadata":{"id":"ylOJ9q3YUHN9"}},{"cell_type":"markdown","source":["ANSWER : MSE Calculation\n","\n","MSE is calculated by:\n","\n","Finding the difference between the actual value and the predicted value (this difference is called the error).\n","Squaring each of the errors.\n","Taking the average of all the squared errors.\n","The Impact of Outliers\n","\n","Squaring the errors: Outliers, being data points far away from the rest of the data, have very large errors. When these large errors are squared, they become even larger and dominate the MSE calculation.\n","Averaging: Even a single large outlier can significantly inflate the average, as it disproportionately contributes a much larger value to the sum of squared errors.\n","Example\n","\n","Imagine you are predicting house prices. Most houses are in the range of $200,000 - $400,000, but you have one outlier priced at $2,000,000. The error for this outlier will be much larger than for other houses. When squared, this large error will heavily influence the MSE value, making it seem like your model is performing poorly even if it's accurate for the majority of houses.\n","\n","In essence, MSE's sensitivity to outliers arises from the fact that it squares the errors, magnifying the impact of any unusually large errors on the overall metric.\n","\n","Alternatives to Consider\n","\n","If you're working with a dataset that contains outliers, you might consider using alternative metrics that are less sensitive to extreme values, such as:\n","\n","Mean Absolute Error (MAE): MAE takes the average of the absolute differences between actual and predicted values, reducing the impact of outliers since it doesn't involve squaring.\n","Huber Loss: Huber Loss is a combination of MSE and MAE. It treats smaller errors like MSE and larger errors like MAE, providing a compromise that's less sensitive to outliers than MSE but still differentiable."],"metadata":{"id":"DKgNqDt42x8Q"}},{"cell_type":"markdown","source":["18. **What is the role of homoscedasticity in linear regression ?**"],"metadata":{"id":"R2vgYZoo2_77"}},{"cell_type":"markdown","source":["ANSWER : the role of homoscedasticity in linear regression\n","\n","Okay, let's discuss the role of homoscedasticity in linear regression:\n","\n","Homoscedasticity refers to the assumption that the variance of the errors (residuals) is constant across all levels of the independent variables. In simpler terms, it means that the spread of the residuals should be roughly the same for all values of the predictors.\n","\n","Why is it important?\n","\n","Homoscedasticity is a crucial assumption for linear regression because it ensures that:\n","\n","The estimates of the regression coefficients are efficient: When the errors have constant variance, the ordinary least squares (OLS) estimator produces the most efficient estimates of the regression coefficients. This means that the estimates have the lowest possible variance, making them more reliable.\n","\n","The standard errors of the coefficients are unbiased: Unbiased standard errors are essential for making valid inferences about the significance of the predictors. If the homoscedasticity assumption is violated (heteroscedasticity), the standard errors will be biased, potentially leading to incorrect conclusions about the relationships between the variables.\n","\n","Hypothesis tests and confidence intervals are valid: The validity of hypothesis tests and confidence intervals for the regression coefficients relies on the assumption of homoscedasticity. When this assumption is violated, the results of these statistical tests may be unreliable.\n","\n","Consequences of violating homoscedasticity (heteroscedasticity):\n","\n","If the homoscedasticity assumption is violated, it can lead to several problems:\n","\n","Inefficient coefficient estimates: The estimates of the regression coefficients may not be as precise as they could be.\n","Biased standard errors: The standard errors of the coefficients may be underestimated or overestimated, affecting the validity of hypothesis tests and confidence intervals.\n","Misleading inferences: Incorrect conclusions may be drawn about the relationships between the variables."],"metadata":{"id":"GR2NB-x63JIT"}},{"cell_type":"markdown","source":["19. **What is Root Mean Squared Error (RMSE) ?**"],"metadata":{"id":"B0ZPOz4N3UfZ"}},{"cell_type":"markdown","source":["ANSWER: Root Mean Squared Error (RMSE) is a frequently used measure to evaluate the performance of a regression model. It essentially represents the average difference between the values predicted by a model and the actual observed values.\n","\n","Here's a breakdown:\n","\n","Calculation\n","\n","Calculate the errors: Find the difference between each predicted value and its corresponding actual value.\n","Square the errors: Square each of the errors calculated in the previous step.\n","Calculate the mean: Find the average of all the squared errors.\n","Take the square root: Take the square root of the mean squared error obtained in the previous step. This final value is the RMSE.\n","Formula\n","\n","\n","RMSE = √[ Σ(yᵢ - ŷᵢ)² / n ]\n","Use code with caution\n","Where:\n","\n","yᵢ: represents the actual value for the ith data point\n","ŷᵢ: represents the predicted value for the ith data point\n","n: is the total number of data points\n","Σ: denotes the sum over all data points\n","Interpretation\n","\n","RMSE is interpreted as the standard deviation of the residuals (prediction errors). It provides an idea of how spread out the residuals are around the line of best fit. A lower RMSE indicates a better fit, meaning the model's predictions are closer to the actual values.\n","\n","Advantages of RMSE\n","\n","Easy to understand: It's relatively straightforward to interpret as it's in the same units as the target variable.\n","Sensitivity to large errors: It gives more weight to larger errors, making it useful for identifying models that make significant prediction mistakes.\n","Widely used: It's a commonly used metric, allowing for easier comparison of model performance across different studies and datasets.\n","Relationship to MSE\n","\n","RMSE is simply the square root of the Mean Squared Error (MSE). Taking the square root makes the scale of the error the same as the scale of the target variable, which is why it is often preferred over MSE for interpretability."],"metadata":{"id":"ASqxP2Yu3fbY"}},{"cell_type":"markdown","source":["20. **Why is pickling considered risky ?**"],"metadata":{"id":"IVa_0Rgg33gT"}},{"cell_type":"markdown","source":["ANSWER: Security Risks\n","\n","Arbitrary Code Execution: The primary risk with pickling is that it can be used to execute arbitrary code on your system. If you unpickle data from an untrusted source, it could contain malicious code that would be executed when the object is loaded. This could potentially give an attacker control over your system.\n","\n","Data Integrity: While less common, it's also possible for pickled data to be tampered with. This could lead to your program loading incorrect or corrupted data, which could have unexpected and potentially harmful consequences.\n","\n","Other Considerations\n","\n","Compatibility: Pickled data is only guaranteed to be compatible with the same version of Python that it was created with. Trying to unpickle data with a different version of Python can lead to errors or unexpected behavior.\n","\n","Maintenance: If the structure of the objects you are pickling changes over time, you may need to update your code to handle the changes when unpickling older data. This can add complexity to maintaining your codebase.\n","\n","Mitigation Strategies\n","\n","To mitigate the risks associated with pickling, you can take the following precautions:\n","\n","Never unpickle data from untrusted sources: Only unpickle data that you have created yourself or that you have received from a trusted source.\n","Use alternative serialization formats: Consider using safer serialization formats like JSON or YAML, which are less prone to arbitrary code execution.\n","Validate pickled data before unpickling: Implement checks to ensure that the pickled data is in the expected format and has not been tampered with.\n","Limit the use of pickling for sensitive data: Avoid pickling data that contains sensitive information, such as passwords or financial data.\n","\n"],"metadata":{"id":"CfhDm1xB4Plo"}},{"cell_type":"markdown","source":["21.  **What alternatives exist to pickling for saving ML models ?**"],"metadata":{"id":"7g1o7pDZ4gHI"}},{"cell_type":"markdown","source":["ANSWER: 1. Joblib\n","\n","Functionality: Joblib is a set of tools to provide lightweight pipelining in Python. It's particularly efficient for objects that carry large numpy arrays internally, which is often the case with machine learning models.\n","Advantages: Often more efficient than pickle for large NumPy arrays, supports parallel processing for faster saving and loading.\n","Example:\n","\n","import joblib\n","\n","#### Save the model\n","joblib.dump(model, 'model.joblib')\n","\n","#### Load the model\n","loaded_model = joblib.load('model.joblib')\n","Use code with caution\n","2. Built-in Model Save Methods (for Specific Libraries)\n","\n","Functionality: Many popular machine learning libraries like scikit-learn, TensorFlow, PyTorch, and Keras provide their own built-in methods for saving and loading models.\n","Advantages: These methods are often optimized for the specific model types and tend to be more robust and reliable.\n","Examples:\n","Scikit-learn: joblib.dump(model, 'model.joblib') (scikit-learn often recommends using joblib internally)\n","TensorFlow/Keras: model.save('model.h5') or model.save('model') (saves in SavedModel format)\n","PyTorch: torch.save(model.state_dict(), 'model.pth') (saves the model's state dictionary)\n","3. ONNX (Open Neural Network Exchange)\n","\n","Functionality: ONNX is an open format for representing machine learning models. It allows you to convert models from different frameworks (like PyTorch, TensorFlow, etc.) into a common format that can be used in other environments.\n","Advantages: Increases interoperability, makes it easier to deploy models to different platforms.\n","Example:\n","\n","import torch.onnx\n","#### ... (assuming 'model' is a PyTorch model) ...\n","torch.onnx.export(model, torch.randn(1, 3, 224, 224), \"model.onnx\")\n","Use code with caution\n","4. PMML (Predictive Model Markup Language)\n","\n","Functionality: PMML is an XML-based language for representing predictive models. It's supported by a wide range of tools and platforms.\n","Advantages: Well-established standard, good for sharing models across different systems.\n","Example: (using the pypmml library)\n","\n","from sklearn2pmml import sklearn2pmml\n","from sklearn2pmml.pipeline import PMMLPipeline\n","\n","pipeline = PMMLPipeline([\n","    (\"classifier\", model) # Assuming 'model' is your scikit-learn model\n","])\n","sklearn2pmml(pipeline, \"model.pmml\", with_repr = True)\n","Use code with caution\n","Choosing the Right Approach\n","\n","The best alternative to pickling depends on your specific needs and the libraries you're using:\n","\n","Joblib: A good choice for most scikit-learn models and models with large NumPy arrays.\n","Built-in methods: Often the most reliable and efficient option when available.\n","ONNX: Best for interoperability and deploying models to different platforms.\n","PMML: Suitable for sharing models across different systems and tools."],"metadata":{"id":"q5sEaSbM5I_I"}},{"cell_type":"markdown","source":["22. **What is heteroscedasticity, and why is it a problem ?**"],"metadata":{"id":"enOaBYOR5kSn"}},{"cell_type":"markdown","source":["ANSWER: Homoscedasticity: In linear regression, one of the key assumptions is homoscedasticity, which means that the variance of the errors (residuals) is constant across all levels of the independent variables.\n","Heteroscedasticity: When this assumption is violated, we have heteroscedasticity. It means that the spread or variability of the residuals is not the same across the range of values of the independent variables. In simpler terms, the data points are more spread out at some parts of the regression line and more clustered in other parts.\n","\n","\n","\n","Inefficient Estimates: While heteroscedasticity doesn't bias the coefficient estimates (the values of the slopes and intercept in the regression equation), it makes them less efficient. This means the estimates have higher variance and are less precise than they could be under homoscedasticity.\n","\n","Unreliable Standard Errors: Heteroscedasticity leads to biased and inconsistent standard errors of the coefficient estimates. This is a critical issue because standard errors are used to calculate:\n","\n","Confidence Intervals: Biased standard errors result in confidence intervals that are either too narrow or too wide, giving a misleading picture of the uncertainty surrounding the estimates.\n","Hypothesis Tests: Inaccurate standard errors affect the calculation of t-statistics and p-values in hypothesis tests. This can lead to incorrect conclusions about the statistical significance of the predictors.\n","Misleading Inferences: Because of the unreliable standard errors, you might incorrectly conclude that a predictor is statistically significant when it's not, or vice versa. This can lead to drawing wrong conclusions about the relationships between the variables.\n","\n","How to Detect Heteroscedasticity\n","\n","Visual Inspection: Plotting the residuals against the predicted values is a common way to visually check for heteroscedasticity. If you see a pattern in the spread of the residuals (e.g., a funnel shape, where the residuals become wider or narrower as the predicted values increase), it suggests heteroscedasticity.\n","Statistical Tests: There are formal statistical tests for heteroscedasticity, such as the Breusch-Pagan test and the White test. These tests help to determine if the evidence for heteroscedasticity is statistically significant.\n","How to Address Heteroscedasticity\n","\n","Data Transformations: Transforming the dependent variable or independent variables (e.g., using logarithms, square roots) can often help to stabilize the variance.\n","Weighted Least Squares: This method assigns weights to the data points, giving more weight to observations with lower variance and less weight to those with higher variance.\n","Robust Standard Errors: You can use heteroscedasticity-consistent standard errors (also called robust standard errors) to adjust for the impact of heteroscedasticity on the standard errors of the coefficient estimates."],"metadata":{"id":"z_VkM8cW55g0"}},{"cell_type":"markdown","source":["23.  **How can interaction terms enhance a regression model's predictive power ?**"],"metadata":{"id":"EhEBWbwA6v_A"}},{"cell_type":"markdown","source":["ANSWER: In regression, an interaction term represents the combined effect of two or more independent variables on the dependent variable. It essentially captures the idea that the relationship between one independent variable and the dependent variable might change depending on the value of another independent variable.\n","\n","How Interaction Terms Enhance Predictive Power\n","\n","Capturing Non-linear Relationships: Linear regression assumes a linear relationship between the independent and dependent variables. However, in many real-world scenarios, relationships are more complex and non-linear. Interaction terms allow the model to capture these non-linear effects by allowing the slope of one variable to change depending on the value of another variable.\n","\n","Modeling Synergistic or Antagonistic Effects: Interaction terms can model situations where the combined effect of two variables is greater (synergistic) or less (antagonistic) than the sum of their individual effects. For example, imagine a model predicting crop yield based on rainfall and fertilizer. The interaction term could capture the fact that the effect of fertilizer on yield is greater when there is sufficient rainfall.\n","\n","Improving Model Accuracy: By including relevant interaction terms, the model becomes more flexible and better able to fit the data. This often leads to a reduction in prediction error and an improvement in overall model accuracy, as measured by metrics like R-squared or RMSE.\n","\n","Providing Deeper Insights: Interaction terms can uncover hidden relationships between variables that would not be apparent from looking at the individual effects alone. This can provide valuable insights into the underlying processes that are driving the dependent variable.\n","\n","Example\n","\n","Let's say you're building a model to predict house prices based on size (in square feet) and location (urban or suburban). You might include an interaction term between size and location to account for the fact that the impact of size on price might be different in urban areas compared to suburban areas.\n","\n","Important Considerations\n","\n","Careful Selection: It's essential to carefully select interaction terms based on domain knowledge and theoretical understanding. Including too many irrelevant interaction terms can lead to overfitting and reduce the model's generalizability.\n","Interpretability: While interaction terms improve predictive power, they can make the model slightly more complex to interpret. It's important to consider the trade-off between accuracy and interpretability."],"metadata":{"id":"hs057DKp7O-f"}},{"cell_type":"markdown","source":["#**PRACTIAL**"],"metadata":{"id":"w1EdCjka7ovn"}},{"cell_type":"markdown","source":["1.**Write a Python script to visualize the distribution of errors (residuals) for a multiple linear regression model\n","using Seaborn's \"diamonds\" dataset ?**"],"metadata":{"id":"TYLjO6oH8CyK"}},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","\n","# Load the diamonds dataset\n","diamonds = sns.load_dataset('diamonds')\n","\n","# Select features and target variable\n","X = diamonds[['carat', 'depth', 'table']]\n","y = diamonds['price']\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Create and train the linear regression model\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# Make predictions on the test set\n","y_pred = model.predict(X_test)\n","\n","# Calculate residuals (errors)\n","residuals = y_test - y_pred\n","\n","# Visualize the distribution of residuals using Seaborn\n","plt.figure(figsize=(8, 6))\n","sns.histplot(residuals, kde=True)  # Histogram with Kernel Density Estimate\n","plt.title('Distribution of Residuals')\n","plt.xlabel('Residuals')\n","plt.ylabel('Frequency')\n","plt.show()\n","\n","# Optional: You can also create a Q-Q plot to check for normality\n","# import statsmodels.api as sm\n","# sm.qqplot(residuals, line='s')\n","# plt.title('Q-Q Plot of Residuals')\n","# plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"034O9rkm-FN2","executionInfo":{"status":"ok","timestamp":1743789800903,"user_tz":-330,"elapsed":9408,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"a6e7cbd6-f348-4d1c-b6bf-6ac40909e62e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["2. **Write a Python script to calculate and print Mean Squared Error (MSE), Mean Absolute Error (MAE), and Root\n","Mean Squared Error (RMSE) for a linear regression model ?**"],"metadata":{"id":"wWpMQBUF-Utn"}},{"cell_type":"code","source":["import numpy as np\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","\n","def regression_metrics(y_true, y_pred):\n","    \"\"\"Calculates and prints regression metrics.\n","\n","    Args:\n","        y_true: The true (actual) target values.\n","        y_pred: The predicted target values.\n","    \"\"\"\n","\n","    mse = mean_squared_error(y_true, y_pred)\n","    mae = mean_absolute_error(y_true, y_pred)\n","    rmse = np.sqrt(mse)\n","\n","    print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n","    print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n","    print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")\n","\n","# Example usage:\n","# Assuming you have y_test (true values) and y_pred (predicted values)\n","# from your regression model:\n","\n","# regression_metrics(y_test, y_pred)"],"metadata":{"id":"tfO-BlynAk_s"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["3.  **Write a Python script to check if the assumptions of linear regression are met. Use a scatter plot to check\n","linearity, residuals plot for homoscedasticity, and correlation matrix for multicollinearity ?**"],"metadata":{"id":"os_O6ftOA3Fr"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import statsmodels.api as sm\n","from statsmodels.stats.outliers_influence import variance_inflation_factor\n","\n","def check_linear_regression_assumptions(X, y, feature_names):\n","    \"\"\"Checks assumptions of linear regression.\n","\n","    Args:\n","        X: The independent variables (features).\n","        y: The dependent variable (target).\n","        feature_names: List of feature names.\n","    \"\"\"\n","\n","    # 1. Linearity: Scatter plots\n","    print(\"Checking Linearity with Scatter Plots:\")\n","    for feature in feature_names:\n","        plt.figure(figsize=(8, 6))\n","        plt.scatter(X[feature], y)\n","        plt.title(f\"Scatter Plot: {feature} vs. Target\")\n","        plt.xlabel(feature)\n","        plt.ylabel(\"Target\")\n","        plt.show()\n","\n","    # 2. Homoscedasticity: Residuals plot\n","    print(\"\\nChecking Homoscedasticity with Residuals Plot:\")\n","    model = sm.OLS(y, sm.add_constant(X)).fit()  # Fit OLS model\n","    residuals = model.resid\n","    plt.figure(figsize=(8, 6))\n","    plt.scatter(model.predict(), residuals)\n","    plt.title(\"Residuals Plot\")\n","    plt.xlabel(\"Predicted Values\")\n","    plt.ylabel(\"Residuals\")\n","    plt.axhline(y=0, color='r', linestyle='--')  # Add a horizontal line at 0\n","    plt.show()\n","\n","    # 3. Multicollinearity: Correlation matrix and VIF\n","    print(\"\\nChecking Multicollinearity with Correlation Matrix and VIF:\")\n","    correlation_matrix = X.corr()\n","    print(\"Correlation Matrix:\")\n","    print(correlation_matrix)\n","    plt.figure(figsize=(10, 8))\n","    sns.heatmap(correlation_matrix, annot=True, cmap=\"coolwarm\")\n","    plt.title(\"Correlation Matrix Heatmap\")\n","    plt.show()\n","\n","    # Calculate VIF\n","    vif_data = pd.DataFrame()\n","    vif_data[\"feature\"] = feature_names\n","    vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n","    print(\"\\nVariance Inflation Factor (VIF):\")\n","    print(vif_data)\n","\n","# Example usage:\n","# Assuming you have your data in a pandas DataFrame called 'df'\n","# and your feature columns are 'feature1', 'feature2', ...\n","\n","# X = df[['feature1', 'feature2', ...]]\n","# y = df['target']\n","# feature_names = ['feature1', 'feature2', ...]\n","\n","# check_linear_regression_assumptions(X, y, feature_names)"],"metadata":{"id":"qGoNh-dTBhXY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["4. **Write a Python script that creates a machine learning pipeline with feature scaling and evaluates the\n","performance of different regression models ?**"],"metadata":{"id":"Cym2HLaoB8WL"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.pipeline import Pipeline\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LinearRegression\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","# Load your dataset (replace 'your_dataset.csv' with your actual file)\n","data = pd.read_csv('your_dataset.csv')\n","\n","# Separate features (X) and target (y)\n","X = data[['feature1', 'feature2', ...]]  # Replace with your feature columns\n","y = data['target_variable']            # Replace with your target column\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Define the pipeline with feature scaling and regression models\n","pipelines = {\n","    'Linear Regression': Pipeline([('scaler', StandardScaler()), ('model', LinearRegression())]),\n","    'Decision Tree': Pipeline([('scaler', StandardScaler()), ('model', DecisionTreeRegressor(random_state=42))]),\n","    'Random Forest': Pipeline([('scaler', StandardScaler()), ('model', RandomForestRegressor(random_state=42))]),\n","}\n","\n","# Train and evaluate each model\n","for model_name, pipeline in pipelines.items():\n","    pipeline.fit(X_train, y_train)\n","    y_pred = pipeline.predict(X_test)\n","\n","    mse = mean_squared_error(y_test, y_pred)\n","    r2 = r2_score(y_test, y_pred)\n","\n","    print(f\"{model_name}:\")\n","    print(f\"  MSE: {mse:.4f}\")\n","    print(f\"  R-squared: {r2:.4f}\")\n","    print(\"-\" * 20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"DYTVTP3aDQ_c","executionInfo":{"status":"error","timestamp":1743791229871,"user_tz":-330,"elapsed":57,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"58f5d6c7-5347-48e5-b518-6ab6e3cd86f3"},"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'your_dataset.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-85ef23537db5>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Load your dataset (replace 'your_dataset.csv' with your actual file)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'your_dataset.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Separate features (X) and target (y)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'your_dataset.csv'"]}]},{"cell_type":"markdown","source":["5.  **Implement a simple linear regression model on a dataset and print the model's coefficients, intercept, and\n","R-squared score. ?**"],"metadata":{"id":"cW2y8b45DrWK"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import r2_score\n","\n","# Load your dataset (replace 'your_dataset.csv' with your actual file)\n","data = pd.read_csv('your_dataset.csv')\n","\n","# Select the feature (X) and target (y) variables\n","X = data[['feature_column']]  # Replace 'feature_column' with your feature column name\n","y = data['target_column']     # Replace 'target_column' with your target column name\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Create and train the linear regression model\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# Print model coefficients, intercept, and R-squared score\n","print(\"Coefficients:\", model.coef_)\n","print(\"Intercept:\", model.intercept_)\n","\n","# Make predictions on the test set and calculate R-squared\n","y_pred = model.predict(X_test)\n","r_squared = r2_score(y_test, y_pred)\n","print(\"R-squared:\", r_squared)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"EL-AAo6oELMy","executionInfo":{"status":"error","timestamp":1743791410378,"user_tz":-330,"elapsed":55,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"7b02803f-55af-4a6e-fa4f-3033aec7e452"},"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'your_dataset.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-4f207150046c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Load your dataset (replace 'your_dataset.csv' with your actual file)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'your_dataset.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# Select the feature (X) and target (y) variables\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'your_dataset.csv'"]}]},{"cell_type":"markdown","source":["6. . **Write a Python script that analyzes the relationship between total bill and tip in the 'tips' dataset using\n","simple linear regression and visualizes the results ?**"],"metadata":{"id":"FaDLIp2tEfDK"}},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","\n","# Load the 'tips' dataset\n","tips = sns.load_dataset('tips')\n","\n","# Create a linear regression model\n","model = LinearRegression()\n","\n","# Define the feature (X) and target (y) variables\n","X = tips[['total_bill']]\n","y = tips['tip']\n","\n","# Fit the model to the data\n","model.fit(X, y)\n","\n","# Print the coefficients and intercept\n","print(\"Coefficients:\", model.coef_)\n","print(\"Intercept:\", model.intercept_)\n","\n","# Make predictions\n","y_pred = model.predict(X)\n","\n","# Visualize the results\n","plt.figure(figsize=(8, 6))\n","sns.scatterplot(x='total_bill', y='tip', data=tips)  # Scatter plot of actual data\n","plt.plot(tips['total_bill'], y_pred, color='red')   # Regression line\n","plt.title('Total Bill vs. Tip with Regression Line')\n","plt.xlabel('Total Bill')\n","plt.ylabel('Tip')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":599},"id":"p__XaugAF4cz","executionInfo":{"status":"ok","timestamp":1743791825189,"user_tz":-330,"elapsed":586,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"482a90cf-2bc6-4f79-a143-a54ec1173ab4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Coefficients: [0.10502452]\n","Intercept: 0.9202696135546731\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["7.  **Write a Python script that fits a linear regression model to a synthetic dataset with one feature. Use the\n","model to predict new values and plot the data points along with the regression line ?**"],"metadata":{"id":"E_xUnLwZG28Z"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LinearRegression\n","\n","# Generate synthetic data\n","np.random.seed(42)  # For reproducibility\n","X = np.random.rand(100, 1) * 10  # Feature (random values between 0 and 10)\n","y = 2 * X + 3 + np.random.randn(100, 1) * 2  # Target with some noise\n","\n","# Create and train the linear regression model\n","model = LinearRegression()\n","model.fit(X, y)\n","\n","# Predict new values\n","X_new = np.array([[5], [8]])  # New feature values for prediction\n","y_pred = model.predict(X_new)\n","\n","# Plot the data points and regression line\n","plt.figure(figsize=(8, 6))\n","plt.scatter(X, y, label='Data Points')  # Scatter plot of original data\n","plt.plot(X, model.predict(X), color='red', label='Regression Line')  # Regression line\n","plt.scatter(X_new, y_pred, color='green', marker='o', s=100, label='Predictions')  # Predicted points\n","plt.title('Linear Regression with Synthetic Data')\n","plt.xlabel('Feature (X)')\n","plt.ylabel('Target (y)')\n","plt.legend()\n","plt.show()\n","\n","# Print predictions\n","print(\"Predictions for X_new:\", y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":599},"id":"JTsIlNhtHvpf","executionInfo":{"status":"ok","timestamp":1743792314120,"user_tz":-330,"elapsed":201,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"c6c7a5db-a5be-4575-c634-66d9fd100db2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Predictions for X_new: [[12.97041909]\n"," [18.69455515]]\n"]}]},{"cell_type":"markdown","source":["8.  **Write a Python script that pickles a trained linear regression model and saves it to a file ?**"],"metadata":{"id":"mJf3tcVsH0E3"}},{"cell_type":"code","source":["import pickle\n","from sklearn.linear_model import LinearRegression\n","# ... (Your code to load data, create X, y, and train the model) ...\n","\n","# Assume your trained model is called 'model'\n","# Save the model to a file using pickle\n","filename = 'linear_regression_model.pkl'\n","with open(filename, 'wb') as file:\n","    pickle.dump(model, file)\n","\n","print(f\"Model saved to {filename}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uDYGyLB1I0cE","executionInfo":{"status":"ok","timestamp":1743792593846,"user_tz":-330,"elapsed":54,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"23cde9c6-d3a0-4bbf-ad29-f669bf05cd1c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model saved to linear_regression_model.pkl\n"]}]},{"cell_type":"code","source":["with open('linear_regression_model.pkl', 'rb') as file:\n","    loaded_model = pickle.load(file)"],"metadata":{"id":"YufAuBAvJQFl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["9.  **Write a Python script that fits a polynomial regression model (degree 2) to a dataset and plots the\n","regression curve ?**"],"metadata":{"id":"j-dgt_49JYR_"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LinearRegression\n","from sklearn.preprocessing import PolynomialFeatures\n","\n","# Generate some sample data (you can replace this with your own dataset)\n","np.random.seed(42)\n","X = np.random.rand(100, 1) * 10  # Feature\n","y = 2 * X**2 + 3 * X + 5 + np.random.randn(100, 1) * 5  # Target with noise\n","\n","# Create polynomial features (degree 2)\n","poly_features = PolynomialFeatures(degree=2, include_bias=False)\n","X_poly = poly_features.fit_transform(X)\n","\n","# Create and train the linear regression model\n","model = LinearRegression()\n","model.fit(X_poly, y)\n","\n","# Generate points for plotting the curve\n","X_plot = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)\n","X_plot_poly = poly_features.transform(X_plot)\n","y_plot = model.predict(X_plot_poly)\n","\n","# Plot the data points and regression curve\n","plt.figure(figsize=(8, 6))\n","plt.scatter(X, y, label='Data Points')\n","plt.plot(X_plot, y_plot, color='red', label='Regression Curve (Degree 2)')\n","plt.title('Polynomial Regression (Degree 2)')\n","plt.xlabel('Feature (X)')\n","plt.ylabel('Target (y)')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"jIHyEY7bKVhO","executionInfo":{"status":"ok","timestamp":1743792992439,"user_tz":-330,"elapsed":281,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"46cf4073-f8ad-4181-ee9a-19bb70faafe8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["10. **Generate synthetic data for simple linear regression (use random values for X and y) and fit a linear\n","regression model to the data. Print the model's coefficient and intercept ?**\n","\n","\n"],"metadata":{"id":"20SD7h_6Kdcn"}},{"cell_type":"code","source":["import numpy as np\n","from sklearn.linear_model import LinearRegression\n","\n","# Generate synthetic data\n","np.random.seed(42)  # For reproducibility\n","X = np.random.rand(100, 1) * 10  # Random values between 0 and 10 for X\n","y = 2 * X + 3 + np.random.randn(100, 1) * 2  # y = 2X + 3 + noise\n","\n","# Create and train the linear regression model\n","model = LinearRegression()\n","model.fit(X, y)\n","\n","# Print the model's coefficient and intercept\n","print(\"Coefficient:\", model.coef_[0][0])  # Accessing the coefficient\n","print(\"Intercept:\", model.intercept_[0])   # Accessing the intercept"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XAMHNzbmKvHQ","executionInfo":{"status":"ok","timestamp":1743793109089,"user_tz":-330,"elapsed":15,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"c7983fe8-4e79-4e64-ada2-e6de9bb1fd80"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Coefficient: 1.908045354575393\n","Intercept: 3.4301923150935014\n"]}]},{"cell_type":"markdown","source":["11.  **Write a Python script that fits polynomial regression models of different degrees to a synthetic dataset and\n","compares their performance ?**"],"metadata":{"id":"1RkoRi0zE3iG"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.metrics import r2_score, mean_squared_error\n","\n","# Generate synthetic data\n","np.random.seed(0)\n","X = np.random.rand(100, 1) * 10  # Independent variable\n","y = 2 * X**2 + 3 * X + 5 + np.random.randn(100, 1) * 5  # Dependent variable with noise\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n","\n","# Define a function to fit and evaluate a polynomial regression model\n","def fit_and_evaluate_polynomial_model(degree):\n","    \"\"\"\n","    Fits a polynomial regression model of the specified degree and evaluates its performance.\n","\n","    Args:\n","        degree (int): The degree of the polynomial.\n","\n","    Returns:\n","        tuple: A tuple containing the R-squared, MSE, and RMSE of the model.\n","    \"\"\"\n","    poly_features = PolynomialFeatures(degree=degree)\n","    X_train_poly = poly_features.fit_transform(X_train)\n","    X_test_poly = poly_features.transform(X_test)\n","\n","    model = LinearRegression()\n","    model.fit(X_train_poly, y_train)\n","\n","    y_pred = model.predict(X_test_poly)\n","\n","    r2 = r2_score(y_test, y_pred)\n","    mse = mean_squared_error(y_test, y_pred)\n","    rmse = np.sqrt(mse)\n","\n","    return r2, mse, rmse\n","\n","# Fit and evaluate models for different degrees\n","degrees = [1, 2, 3, 4, 5]  # Degrees of the polynomial\n","results = {}\n","for degree in degrees:\n","    r2, mse, rmse = fit_and_evaluate_polynomial_model(degree)\n","    results[degree] = {'R-squared': r2, 'MSE': mse, 'RMSE': rmse}\n","\n","# Display the results\n","results_df = pd.DataFrame(results).T\n","print(results_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nu85H7s7FFly","executionInfo":{"status":"ok","timestamp":1743875622137,"user_tz":-330,"elapsed":4273,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"b817e097-663b-47ec-f7e6-e0f91c67a8a3"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["   R-squared         MSE       RMSE\n","1   0.947992  242.229534  15.563725\n","2   0.994479   25.713670   5.070865\n","3   0.994466   25.772812   5.076693\n","4   0.994389   26.133743   5.112117\n","5   0.994384   26.157668   5.114457\n"]}]},{"cell_type":"markdown","source":["12. **Write a Python script that fits a simple linear regression model with two features and prints the model's\n","coefficients, intercept, and R-squared score ?**"],"metadata":{"id":"wNj7hfZKFu93"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score\n","\n","# Create sample data with two features (X1 and X2) and a target variable (y)\n","np.random.seed(0)\n","X = np.random.rand(100, 2) * 10  # Two features, X1 and X2\n","y = 3 * X[:, 0] + 2 * X[:, 1] + 5 + np.random.randn(100) * 3  # Target variable with noise\n","\n","# Create a Linear Regression model\n","model = LinearRegression()\n","\n","# Fit the model to the data\n","model.fit(X, y)\n","\n","# Get the coefficients, intercept, and R-squared score\n","coefficients = model.coef_\n","intercept = model.intercept_\n","r_squared = r2_score(y, model.predict(X))\n","\n","# Print the results\n","print(\"Coefficients:\", coefficients)\n","print(\"Intercept:\", intercept)\n","print(\"R-squared:\", r_squared)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"skmdxqXJGBQI","executionInfo":{"status":"ok","timestamp":1743875745160,"user_tz":-330,"elapsed":32,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"462646b3-30aa-43c1-e2c5-7517d337e2ec"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Coefficients: [2.87211013 2.00887252]\n","Intercept: 5.343509766853337\n","R-squared: 0.9235517341733684\n"]}]},{"cell_type":"markdown","source":["13. **Write a Python script that generates synthetic data, fits a linear regression model, and visualizes the\n","regression line along with the data points ?**"],"metadata":{"id":"18M9hjdYG8Yo"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LinearRegression\n","\n","# Generate synthetic data\n","np.random.seed(0)\n","X = np.random.rand(100, 1) * 10  # Independent variable\n","y = 2 * X + 5 + np.random.randn(100, 1) * 3  # Dependent variable with noise\n","\n","# Create and fit the linear regression model\n","model = LinearRegression()\n","model.fit(X, y)\n","\n","# Predict values using the model\n","y_pred = model.predict(X)\n","\n","# Plot the data points and the regression line\n","plt.scatter(X, y, label=\"Data Points\")  # Scatter plot of data points\n","plt.plot(X, y_pred, color='red', label=\"Regression Line\")  # Line plot of the regression line\n","plt.xlabel(\"X\")\n","plt.ylabel(\"y\")\n","plt.title(\"Linear Regression with Synthetic Data\")\n","plt.legend()\n","plt.show()  # Display the plot"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"VgQcxzs2HH5Y","executionInfo":{"status":"ok","timestamp":1743876072387,"user_tz":-330,"elapsed":763,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"39540a98-b182-45be-d36b-570ff2cf6b59"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["14. **Write a Python script that uses the Variance Inflation Factor (VIF) to check for multicollinearity in a dataset\n","with multiple features ?**"],"metadata":{"id":"DZ2bZmdHHf_g"}},{"cell_type":"code","source":["import pandas as pd\n","from statsmodels.stats.outliers_influence import variance_inflation_factor\n","\n","# Sample dataset (replace with your actual data)\n","data = {\n","    'Feature1': [1, 2, 3, 4, 5],\n","    'Feature2': [2, 4, 5, 7, 8],\n","    'Feature3': [3, 5, 7, 8, 10],\n","    'Feature4': [1, 3, 4, 6, 7]\n","}\n","df = pd.DataFrame(data)\n","\n","# Calculate VIF for each feature\n","vif_data = pd.DataFrame()\n","vif_data[\"Feature\"] = df.columns\n","vif_data[\"VIF\"] = [variance_inflation_factor(df.values, i) for i in range(df.shape[1])]\n","\n","# Print the VIF values\n","print(vif_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bsSV8346HrFC","executionInfo":{"status":"ok","timestamp":1743876197948,"user_tz":-330,"elapsed":361,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"15c26652-0a62-4132-aa74-17e5ca3a92d2"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["    Feature     VIF\n","0  Feature1   257.5\n","1  Feature2  1382.5\n","2  Feature3   109.5\n","3  Feature4  1554.0\n"]}]},{"cell_type":"markdown","source":["15.  **Write a Python script that generates synthetic data for a polynomial relationship (degree 4), fits a\n","polynomial regression model, and plots the regression curve ?**"],"metadata":{"id":"40_SOBuSHx3W"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.linear_model import LinearRegression\n","\n","# Generate synthetic data\n","np.random.seed(0)\n","X = np.random.rand(100, 1) * 10  # Independent variable\n","y = 0.5 * X**4 - 2 * X**3 + 3 * X**2 + 2 * X + 5 + np.random.randn(100, 1) * 10  # Dependent variable with noise\n","\n","# Create polynomial features\n","poly_features = PolynomialFeatures(degree=4)\n","X_poly = poly_features.fit_transform(X)\n","\n","# Fit polynomial regression model\n","model = LinearRegression()\n","model.fit(X_poly, y)\n","\n","# Generate points for plotting the curve\n","X_plot = np.linspace(X.min(), X.max(), 300).reshape(-1, 1)  # More points for a smooth curve\n","X_plot_poly = poly_features.transform(X_plot)\n","y_plot = model.predict(X_plot_poly)\n","\n","# Plot the data and the regression curve\n","plt.scatter(X, y, label=\"Data Points\")\n","plt.plot(X_plot, y_plot, color='red', label=\"Regression Curve\")\n","plt.xlabel(\"X\")\n","plt.ylabel(\"y\")\n","plt.title(\"Polynomial Regression (Degree 4)\")\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"9HootEzDH6Er","executionInfo":{"status":"ok","timestamp":1743876275546,"user_tz":-330,"elapsed":743,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"a29ef6f2-b2d8-4f28-86b4-fe2257b4953e"},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["16. **Write a Python script that creates a machine learning pipeline with data standardization and a multiple\n","linear regression model, and prints the R-squared score ?**"],"metadata":{"id":"TLf1aqUnIYmH"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.pipeline import Pipeline\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score\n","\n","# Generate synthetic data with multiple features\n","np.random.seed(0)\n","X = np.random.rand(100, 3) * 10  # 3 features\n","y = 2 * X[:, 0] + 3 * X[:, 1] - 1 * X[:, 2] + 5 + np.random.randn(100) * 3  # Target variable\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n","\n","# Create the pipeline\n","pipeline = Pipeline([\n","    ('scaler', StandardScaler()),  # Standardize the data\n","    ('regressor', LinearRegression())  # Apply Linear Regression\n","])\n","\n","# Fit the pipeline to the training data\n","pipeline.fit(X_train, y_train)\n","\n","# Predict on the test data\n","y_pred = pipeline.predict(X_test)\n","\n","# Calculate and print the R-squared score\n","r_squared = r2_score(y_test, y_pred)\n","print(\"R-squared:\", r_squared)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yfZ6HXjtIoCm","executionInfo":{"status":"ok","timestamp":1743876436156,"user_tz":-330,"elapsed":64,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"120f4283-95a0-4883-cf8a-1b2f9199b93d"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared: 0.8895184060585681\n"]}]},{"cell_type":"markdown","source":["17. **Write a Python script that performs polynomial regression (degree 3) on a synthetic dataset and plots the\n","regression curve?**"],"metadata":{"id":"lOozYqfVIyU-"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.linear_model import LinearRegression\n","\n","# Generate synthetic data\n","np.random.seed(0)\n","X = np.random.rand(100, 1) * 10  # Independent variable\n","y = 2 * X**3 - 3 * X**2 + 4 * X + 5 + np.random.randn(100, 1) * 8  # Dependent variable with noise\n","\n","# Create polynomial features (degree 3)\n","poly_features = PolynomialFeatures(degree=3)\n","X_poly = poly_features.fit_transform(X)\n","\n","# Fit polynomial regression model\n","model = LinearRegression()\n","model.fit(X_poly, y)\n","\n","# Generate points for plotting the curve\n","X_plot = np.linspace(X.min(), X.max(), 300).reshape(-1, 1)  # More points for a smooth curve\n","X_plot_poly = poly_features.transform(X_plot)\n","y_plot = model.predict(X_plot_poly)\n","\n","# Plot the data and the regression curve\n","plt.scatter(X, y, label=\"Data Points\")\n","plt.plot(X_plot, y_plot, color='red', label=\"Regression Curve (Degree 3)\")\n","plt.xlabel(\"X\")\n","plt.ylabel(\"y\")\n","plt.title(\"Polynomial Regression (Degree 3)\")\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"sdv-g_OyI8US","executionInfo":{"status":"ok","timestamp":1743876545694,"user_tz":-330,"elapsed":310,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"0a64c975-0f11-4792-c800-04373fc7229f"},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["18. **Write a Python script that performs multiple linear regression on a synthetic dataset with 5 features. Print\n","the R-squared score and model coefficients ?**\n","\n","\n"],"metadata":{"id":"cGhqCqoWJqQB"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score\n","from sklearn.model_selection import train_test_split\n","\n","# Generate synthetic data with 5 features\n","np.random.seed(0)\n","X = np.random.rand(100, 5) * 10  # 5 features\n","y = (\n","    2 * X[:, 0]\n","    + 3 * X[:, 1]\n","    - 1 * X[:, 2]\n","    + 0.5 * X[:, 3]\n","    + 2 * X[:, 4]\n","    + 5\n","    + np.random.randn(100) * 3\n",")  # Target variable with noise\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n","\n","\n","# Create and fit the multiple linear regression model\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# Predict on the test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate and print the R-squared score\n","r_squared = r2_score(y_test, y_pred)\n","print(\"R-squared:\", r_squared)\n","\n","# Print the model coefficients\n","print(\"Coefficients:\", model.coef_)\n","print(\"Intercept:\", model.intercept_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kBKTeKvKJ2kj","executionInfo":{"status":"ok","timestamp":1743876893408,"user_tz":-330,"elapsed":61,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"7ca15e0a-2b1d-4e83-80ab-b66a7b3b215e"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared: 0.891566794918856\n","Coefficients: [ 1.98934449  2.98443847 -0.73435427  0.41086945  1.99389454]\n","Intercept: 4.220133984140745\n"]}]},{"cell_type":"markdown","source":["19.  **Write a Python script that generates synthetic data for linear regression, fits a model, and visualizes the\n","data points along with the regression line ?**"],"metadata":{"id":"EAv_CCVeKbta"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LinearRegression\n","\n","# Generate synthetic data\n","np.random.seed(0)  # Set random seed for reproducibility\n","X = np.random.rand(100, 1) * 10  # Independent variable (100 data points)\n","y = 2 * X + 5 + np.random.randn(100, 1) * 3  # Dependent variable with noise\n","\n","# Create and fit the linear regression model\n","model = LinearRegression()\n","model.fit(X, y)\n","\n","# Predict values using the model\n","y_pred = model.predict(X)\n","\n","# Visualize the data points and the regression line\n","plt.scatter(X, y, label=\"Data Points\")  # Scatter plot of data points\n","plt.plot(X, y_pred, color='red', label=\"Regression Line\")  # Line plot of the regression line\n","plt.xlabel(\"X\")\n","plt.ylabel(\"y\")\n","plt.title(\"Linear Regression with Synthetic Data\")\n","plt.legend()\n","plt.show()  # Display the plot"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"MAlCdb7eKlRo","executionInfo":{"status":"ok","timestamp":1743876975827,"user_tz":-330,"elapsed":418,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"28dc84db-9686-44d0-dcd5-c16e3a0be98a"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["20.  **Create a synthetic dataset with 3 features and perform multiple linear regression. Print the model's Rsquared score and coefficients ?**"],"metadata":{"id":"ndGPgz0pK05L"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score\n","from sklearn.model_selection import train_test_split\n","\n","# Generate synthetic data with 3 features\n","np.random.seed(0)\n","X = np.random.rand(100, 3) * 10  # 3 features\n","y = 2 * X[:, 0] + 3 * X[:, 1] - 1 * X[:, 2] + 5 + np.random.randn(100) * 3  # Target variable with noise\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n","\n","# Create and fit the multiple linear regression model\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# Predict on the test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate and print the R-squared score\n","r_squared = r2_score(y_test, y_pred)\n","print(\"R-squared:\", r_squared)\n","\n","# Print the model coefficients\n","print(\"Coefficients:\", model.coef_)\n","print(\"Intercept:\", model.intercept_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a45Nrq4bK5Fa","executionInfo":{"status":"ok","timestamp":1743877112075,"user_tz":-330,"elapsed":51,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"7acf2b14-c30d-40d3-c14d-b3597a3d21a3"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared: 0.8895184060585684\n","Coefficients: [ 1.80872729  3.00846335 -0.89911198]\n","Intercept: 4.7738304382969865\n"]}]},{"cell_type":"markdown","source":["21.  **Write a Python script that demonstrates how to serialize and deserialize machine learning models using\n","joblib instead of pickling ?**"],"metadata":{"id":"zL_xmUoGLRBV"}},{"cell_type":"code","source":["import joblib\n","from sklearn.linear_model import LinearRegression\n","import numpy as np\n","\n","# Create and train a simple linear regression model\n","X = np.random.rand(100, 1) * 10\n","y = 2 * X + 5 + np.random.randn(100, 1) * 3\n","model = LinearRegression()\n","model.fit(X, y)\n","\n","# Serialize the model using joblib\n","model_filename = \"linear_regression_model.joblib\"\n","joblib.dump(model, model_filename)\n","print(f\"Model saved to: {model_filename}\")\n","\n","# Deserialize the model using joblib\n","loaded_model = joblib.load(model_filename)\n","\n","# Make predictions using the loaded model\n","X_new = np.array([[5], [10]])\n","y_pred = loaded_model.predict(X_new)\n","\n","# Print the predictions\n","print(\"Predictions:\", y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xP6DV2usLcX6","executionInfo":{"status":"ok","timestamp":1743877198943,"user_tz":-330,"elapsed":31,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"5af59c30-3d84-410d-b543-6e7d7a10ebac"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Model saved to: linear_regression_model.joblib\n","Predictions: [[15.04013784]\n"," [24.82203783]]\n"]}]},{"cell_type":"markdown","source":["22. **Write a Python script to perform linear regression with categorical features using one-hot encoding. Use\n","the Seaborn 'tips' dataset ?**"],"metadata":{"id":"mARU6tdgLmX6"}},{"cell_type":"code","source":["import seaborn as sns\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score\n","\n","# Load the 'tips' dataset\n","tips = sns.load_dataset('tips')\n","\n","# One-hot encode categorical features\n","tips_encoded = pd.get_dummies(tips, columns=['sex', 'smoker', 'day', 'time'], drop_first=True)\n","\n","# Define features (X) and target (y)\n","X = tips_encoded.drop('tip', axis=1)\n","y = tips_encoded['tip']\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n","\n","# Create and fit the linear regression model\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# Predict on the test data\n","y_pred = model.predict(X_test)\n","\n","# Calculate and print the R-squared score\n","r_squared = r2_score(y_test, y_pred)\n","print(\"R-squared:\", r_squared)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3UMa7WKgQDVU","executionInfo":{"status":"ok","timestamp":1743878377935,"user_tz":-330,"elapsed":1842,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"afa2484d-36df-4dc3-c3f0-efe333c61a55"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["R-squared: 0.5545031052534984\n"]}]},{"cell_type":"markdown","source":["23. **Compare Ridge Regression with Linear Regression on a synthetic dataset and print the coefficients and Rsquared score ?**"],"metadata":{"id":"PKggTCkWQHQH"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression, Ridge\n","from sklearn.metrics import r2_score\n","\n","# Generate synthetic data\n","np.random.seed(0)\n","X = np.random.rand(100, 5) * 10  # 5 features\n","y = 2 * X[:, 0] + 3 * X[:, 1] - X[:, 2] + 0.5 * X[:, 3] + 2 * X[:, 4] + 5 + np.random.randn(100) * 3\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n","\n","# Linear Regression\n","linear_model = LinearRegression()\n","linear_model.fit(X_train, y_train)\n","linear_pred = linear_model.predict(X_test)\n","linear_r2 = r2_score(y_test, linear_pred)\n","\n","# Ridge Regression\n","ridge_model = Ridge(alpha=1.0)  # You can adjust the alpha parameter\n","ridge_model.fit(X_train, y_train)\n","ridge_pred = ridge_model.predict(X_test)\n","ridge_r2 = r2_score(y_test, ridge_pred)\n","\n","# Print results\n","print(\"Linear Regression:\")\n","print(\"Coefficients:\", linear_model.coef_)\n","print(\"R-squared:\", linear_r2)\n","print(\"\\nRidge Regression:\")\n","print(\"Coefficients:\", ridge_model.coef_)\n","print(\"R-squared:\", ridge_r2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-mt_EvUeQNDt","executionInfo":{"status":"ok","timestamp":1743878450028,"user_tz":-330,"elapsed":71,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"cf68072e-713d-4e5b-b33e-1b9421142a24"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Linear Regression:\n","Coefficients: [ 1.98934449  2.98443847 -0.73435427  0.41086945  1.99389454]\n","R-squared: 0.891566794918856\n","\n","Ridge Regression:\n","Coefficients: [ 1.98542182  2.97995678 -0.73240185  0.41109419  1.99128806]\n","R-squared: 0.8919063045863044\n"]}]},{"cell_type":"markdown","source":["24.**Write a Python script that uses cross-validation to evaluate a Linear Regression model on a synthetic\n","dataset ?**"],"metadata":{"id":"pXGdkTEjQYiF"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import KFold, cross_val_score\n","from sklearn.linear_model import LinearRegression\n","\n","# Generate synthetic data\n","np.random.seed(0)\n","X = np.random.rand(100, 5) * 10  # 5 features\n","y = 2 * X[:, 0] + 3 * X[:, 1] - X[:, 2] + 0.5 * X[:, 3] + 2 * X[:, 4] + 5 + np.random.randn(100) * 3\n","\n","# Create Linear Regression model\n","model = LinearRegression()\n","\n","# Create KFold cross-validation object\n","kfold = KFold(n_splits=5, shuffle=True, random_state=0)  # 5 folds\n","\n","# Perform cross-validation and get R-squared scores\n","scores = cross_val_score(model, X, y, cv=kfold, scoring='r2')\n","\n","# Print the results\n","print(\"Cross-validation R-squared scores:\", scores)\n","print(\"Average R-squared:\", scores.mean())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kJATyrBJQkO0","executionInfo":{"status":"ok","timestamp":1743878598368,"user_tz":-330,"elapsed":66,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"24d97b1c-13b7-43c2-9a04-2a027852e33e"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Cross-validation R-squared scores: [0.89156679 0.91126218 0.92909328 0.86708852 0.92180817]\n","Average R-squared: 0.9041637884622968\n"]}]},{"cell_type":"markdown","source":["25. **Write a Python script that compares polynomial regression models of different degrees and prints the Rsquared score for each ?**"],"metadata":{"id":"J4g5C571RAFK"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score\n","from sklearn.model_selection import train_test_split\n","\n","# Generate synthetic data\n","np.random.seed(0)\n","X = np.random.rand(100, 1) * 10  # Independent variable\n","y = 2 * X**3 - 3 * X**2 + 4 * X + 5 + np.random.randn(100, 1) * 8  # Dependent variable with noise\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n","\n","# Define the degrees of the polynomial models to compare\n","degrees = [1, 2, 3, 4, 5]\n","\n","# Loop through the degrees and fit models\n","for degree in degrees:\n","    # Create polynomial features\n","    poly_features = PolynomialFeatures(degree=degree)\n","    X_train_poly = poly_features.fit_transform(X_train)\n","    X_test_poly = poly_features.transform(X_test)\n","\n","    # Fit the model\n","    model = LinearRegression()\n","    model.fit(X_train_poly, y_train)\n","\n","    # Predict on the test data\n","    y_pred = model.predict(X_test_poly)\n","\n","    # Calculate and print the R-squared score\n","    r_squared = r2_score(y_test, y_pred)\n","    print(f\"Degree {degree}: R-squared = {r_squared:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F0VwHxy5RRlv","executionInfo":{"status":"ok","timestamp":1743879027411,"user_tz":-330,"elapsed":151,"user":{"displayName":"Aryaveer Choudhary","userId":"10393937371124319623"}},"outputId":"deeb4f31-a116-4194-c0e9-18d7d690e37b"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Degree 1: R-squared = 0.8079\n","Degree 2: R-squared = 0.9941\n","Degree 3: R-squared = 0.9997\n","Degree 4: R-squared = 0.9997\n","Degree 5: R-squared = 0.9997\n"]}]}]}